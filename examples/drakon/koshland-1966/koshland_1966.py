from itcsimlib.thermo import *
from itcsimlib.model_drakon import *

# Autogenerated with DRAKON Editor 1.29

def linear(m, i, j):
    #item 353
    if m.occupied(i,j) == True:
        #item 355
        m.add_dG(i, m.dG_st)
        m.add_dH(i, m.dH_st)
        #item 372
        if j == 0:
            pass
        else:
            #item 356
            if m.occupied(i,j-1) == True:
                #item 358
                m.add_dG(i, m.dG_BB)
                m.add_dH(i, m.dH_BB)
            else:
                #item 357
                m.add_dG(i, m.dG_AB)
                m.add_dH(i, m.dH_AB)
        #item 374
        if j == 3:
            pass
        else:
            #item 361
            if m.occupied(i,j+1) == True:
                #item 363
                m.add_dG(i, m.dG_BB)
                m.add_dH(i, m.dH_BB)
            else:
                #item 362
                m.add_dG(i, m.dG_AB)
                m.add_dH(i, m.dH_AB)
    else:
        pass


def noncooperative(m, i, j):
    #item 434
    if m.occupied(i,j) == True:
        #item 436
        m.add_dG(i, m.dG_st)
        m.add_dH(i, m.dH_st)
    else:
        pass


def square(m, i, j):
    #item 329
    if m.occupied(i,j) == True:
        #item 331
        m.add_dG(i, m.dG_st)
        m.add_dH(i, m.dH_st)
        #item 332
        if m.occupied(i,j-1) == True:
            #item 334
            m.add_dG(i, m.dG_BB)
            m.add_dH(i, m.dH_BB)
        else:
            #item 333
            m.add_dG(i, m.dG_AB)
            m.add_dH(i, m.dH_AB)
        #item 337
        if m.occupied(i,j+1) == True:
            #item 339
            m.add_dG(i, m.dG_BB)
            m.add_dH(i, m.dH_BB)
        else:
            #item 338
            m.add_dG(i, m.dG_AB)
            m.add_dH(i, m.dH_AB)
    else:
        pass


def tetrahedral(m, i, j):
    #item 384
    if m.occupied(i,j) == True:
        #item 386
        m.add_dG(i, m.dG_st)
        m.add_dH(i, m.dH_st)
        #item 417
        counter = 0
        while True:
            #item 406
            if counter == j:
                pass
            else:
                #item 409
                if m.occupied(i,counter) == True:
                    #item 412
                    m.add_dG(i, m.dG_BB)
                    m.add_dH(i, m.dH_BB)
                else:
                    #item 411
                    m.add_dG(i, m.dG_AB)
                    m.add_dH(i, m.dH_AB)
            #item 418
            counter = counter + 1
            #item 419
            if counter < 4:
                pass
            else:
                break
    else:
        pass

class Model(DRAKONIsingModel):
    description = "This is a DRAKON implementation of four models described in Koshland's 1966 Biochemistry article"

    def setup(self):
        #item 136
        self.initialize(nsites=4,circular=True)
        #item 30
        self.add_parameter("dG_st")
        #item 316
        self.add_parameter("dG_AB")
        #item 317
        self.add_parameter("dG_BB")
        #item 32
        self.add_parameter("dH_st")
        self.add_parameter("dH_AB")
        self.add_parameter("dH_BB")


    def site(self, i, j):
        #item 428
        type = "nonncooperative"
        #item 4210001
        if type == "tetrahedral":
            #item 438
            tetrahedral(self,i,j)
        else:
            #item 4210002
            if type == "square":
                #item 439
                square(self,i,j)
            else:
                #item 4210003
                if type == "linear":
                    #item 440
                    linear(self,i,j)
                else:
                    #item 441
                    noncooperative(self,i,j)


